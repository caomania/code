#!/usr/bin/env ruby

require "rubygems"
require "xmpp4r-simple"
require "simple-rss"
require "open-uri"
require "getoptlong"


# A simple app that takes your last Twitters from the last
# n minutes and posts them to Yammer optionally filtered based on a
# keyword. It was built because I wanted to send my twitters to my
# work Yammer stream automatically but wanted to be able to filter
# them simply
#
# example:
#  ./twammer -t 47983 -u test@gmail.com -p password -f bbc
#
# Step though the above:
# 
# 1. Twammer is run every 5 mins via cron
# 2. I post a message to Twitter with #bbc at the end of the message
# 3. Twammer checks for your last twitters in last 5 mins
# 4. Twammer filters the messages with #bbc at the end
# 5. Twammer sends those messages onto Yammer with #bbc removed
# 
#

def options
  opts = GetoptLong.new( 
    [ "--rsstwitter",   "-t", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--userjabber",   "-u", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--passjabber",   "-p", GetoptLong::REQUIRED_ARGUMENT ],
    [ "--delay",        "-d", GetoptLong::OPTIONAL_ARGUMENT ],
    [ "--filter",       "-f", GetoptLong::OPTIONAL_ARGUMENT ],
    [ "--help",         "-h", GetoptLong::NO_ARGUMENT ],
    [ "--check",        "-c", GetoptLong::NO_ARGUMENT ]
  )
  
  def printusage(error_code)
    print "twammer -- Send your Twitters to Yammer\n"
    print "Usage: ./twammer -t STRING -u STRING -p STRING [OPTIONS]\n"
    print "\n"
    print "Allowed options:\n"
    print "    -t, --rsstwitter STRING   Twitter RSS <ID>\n"
    print "                              twitter.com/statuses/user_timeline/<ID>.rss\n"
    print "    -u, --userjabber STRING   Jabber username setup with Yammer IM\n"
    print "    -p, --passjabber STRING   Jabber password setup with Yammer IM\n"
    print "    -d, --delay MINUTES       How far to look back for tweets (default: 5mins)\n"
    print "    -f, --filter STRING       Only send on messages with #<filter> in\n"
    print "    -h, --help                Shows this help\n"
    print "    -c, --check               Display, but don't actually send messages\n"
    print "\n"
    print "Examples:\n"
    print "    ./twammer -t 47983 -u user@gmail.com -p mypassword -f bbc\n"
    print "    ./twammer -t 47983 -u user@gmail.com -p mypassword -d 10 -c\n"
    print "\n"
    exit(error_code)
  end
  
  begin
    o = {}

    opts.each do |opt, arg|

      case opt
      when "--rsstwitter"
        o[:rsstwitter] = arg
        if o[:rsstwitter].nil?
          puts "Arg Missing --rsstwitter required"
          exit 0
        end
      when "--userjabber"
        o[:userjabber] = arg
        if o[:userjabber].nil?
          puts "Arg Missing --userjabber required"
          exit 0
        end
      when "--passjabber"
        o[:passjabber] = arg
        if o[:passjabber].nil?
          puts "Arg Missing --passjabber required"
          exit 0
        end
      when "--delay"
        o[:delay] = arg || 5 
      when "--filter"
        o[:filter] = arg || nil 
      when "--help"
        printusage(0)
      when "--check"
        o[:quiet] = true
      end

    end

    return o
  rescue 
    printusage(1)
  end
end

if __FILE__ == $0

  opts = options

  twitterrss = "http://twitter.com/statuses/user_timeline/#ID#.rss"
  yammer_bot = "yammer@chat.yammer.com" 
  delay_in_seconds = opts.has_key?(:delay) ? opts[:delay].to_i * 60 : (5*60)
  filter = "##{opts[:filter]}" if opts[:filter]

  # fetch RSS
  rss_items = SimpleRSS.parse open(twitterrss.gsub("#ID#", opts[:rsstwitter]))
  messages = rss_items.items.sort {|a,b| a.pubDate<=>b.pubDate}
  # find items added in the last n minutes
  messages = messages.map {|m| m.title if m.pubDate > Time.now - delay_in_seconds}.compact
  # remove the <user>: from start of message
  messages = messages.map {|m| m.split(":", 2).last.strip }
  # filter if filter supplied
  unless opts[:filter].nil?
    messages = messages.map {|m| m.gsub!(/#{filter}$/, '') }.compact
  end
  
  unless messages.empty?

    # now send them to Yammer  
    im = Jabber::Simple.new(opts[:userjabber], opts[:passjabber]) unless opts[:quiet]

    # loop through results and send
    for m in messages 
     # send message
     im.deliver(yammer_bot , m) unless opts[:quiet]
     puts "sent .. #{m}"
     #sleep for a few seconds
     sleep(3)
    end

    # disconnect
    im.disconnect unless opts[:quiet]

  end

end

